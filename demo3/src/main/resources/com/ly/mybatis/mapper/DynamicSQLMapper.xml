<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--指定指定实现接口 即：接口的全类名-->
<mapper namespace="com.ly.mybatis.mapper.DynamicSQLMapper">

    <!--
     * 多条件查询:员工姓名，性别，年龄，电子邮箱
    List<Employee> getEmployeeByMultiCondition(Employee employee);
    -->
    <select id="getEmployeeByMultiConditionOne" resultType="Employee">
        select * from t_emp where 1=1 <!-- 解决了 where关建字多出来，也解决了empName为空时，多个and的情况-->
        <!-- test表示sql查询条件，实际sql是哪个就写哪个（不需要#{}，直接写resultType中的属性名即可）
            java和sql的杂交，不能用&& 只能用and
            标签中的值就表示，满足if的test条件，才会把其拼接到sql中(sql关建字and where等要自己写 ，注意写在哪里)
        -->

        <if test="empName != null and empName != ''"> <!-- 这个是Java属性-->
            and emp_name = #{empName} <!-- 这个是sql，所有是sql字段-->
        </if>

        <if test="sex != null and sex !=' '">
            and sex = #{sex}
        </if>
        <if test="age != null and age !=''">
            and age = #{age}
        </if>
        <if test="email != null and email !=''">
            and email = #{email}
        </if>
    </select>








    <!--
     * 多条件查询:员工姓名，性别，年龄，电子邮箱
    List<Employee> getEmployeeByMultiCondition(Employee employee);
    -->
    <select id="getEmployeeByMultiConditionTwo" resultType="Employee">
        select * from t_emp
        <where>
            <if test="empName != null and empName != ''"> <!-- 这个是Java属性-->
                and emp_name = #{empName} <!-- 这个是sql，所有是sql字段-->
            </if>

            <if test="sex != null and sex !=' '">
                and sex = #{sex}
            </if>
            <if test="age != null and age !=''">
                and age = #{age}
            </if>
            <if test="email != null and email !=''">
                and email = #{email}
            </if>
        </where>

    </select>
















    <!-- 注意，这里是数据库的列名（字段）-->
    <sql id="empColumns">eid,emp_name,sex,age,email</sql>

    <!--
     * 多条件查询:员工姓名，性别，年龄，电子邮箱
    List<Employee> getEmployeeByMultiCondition(Employee employee);
    -->
    <select id="getEmployeeByMultiCondition" resultType="Employee">
        select <include refid="empColumns"></include> from t_emp
        <!--
            prefix属性：表示如果内部有条件成立，在最开始加上 prefix的关建字 【如：where】
            prefixOverrides属性： 表示如果内部有条件成立，则删除==最开始==的关建字【如：and或or】
            suffix属性：表示如果内部有条件成立，在最后面加上 suffix的关建字 【如：;分号】
            suffixOverrides属性： 表示如果内部有条件成立，则删除==最后的==关建字【如：and或or】
        -->
        <trim prefix="where" prefixOverrides="and" suffix=";" suffixOverrides="and|or">
            <if test="empName != null and empName != ''">
                 and emp_name = #{empName} and
            </if>

            <if test="sex != null and sex !=' '">
                 sex = #{sex} and
            </if>
            <if test="age != null and age !=''">
                 age = #{age} or
            </if>
            <if test="email != null and email !=''">
                 email = #{email} and
            </if>
        </trim>

    </select>











    <!--
     * 测试choose，when，otherwise
    List<Employee> getEmployeeByChoose(Employee employee);
    -->
    <select id="getEmployeeByChoose" resultType="Employee">
        select * from t_emp
        <where>
            <!--choose是父标签 ，一组choose 就表示完整的if..else if...else-->
            <choose>
                <!-- 有一个满足条件，其它的就不会执行了 。所以不用加and-->
                <when test="empName != null and empName != ''"> <!-- if-->
                    emp_name = #{empName}
                </when>
                <when test="sex != null and sex !=' '">  <!-- else if-->
                    sex = #{sex}
                </when>
                <when test="age != null and age !=''"> <!-- else if-->
                    age = #{age}
                </when>
                <when test="email != null and email !=''"> <!-- else if-->
                    email = #{email}
                </when>
                <otherwise> <!-- else-->
                    did = 1
                </otherwise>
            </choose>

        </where>
    </select>










    <!--
     * 通过数组实现批量 删除
    int deleteMoreByArray(Integer[] eids);
    -->
    <delete id="deleteMoreByArrayIn">
        <!-- 目标delete  from t_emp where eid in (1,2,3,4) 所以foreach必须放在小括号(中-->
        delete  from t_emp where eid in (
        <!--
            collection属性：表示要遍历的集合/数组，参数传递过来的eids 直接用不用加#{}或${}
            item属性：表示数组中的元素,类似于增强for （自己起的别名）
            separator属性：表示数组中的每个元素间的分隔符（最后一个，和最开始没有 放,刚刚好）
            open属性：表示循环以什么符号开始  代替了手写 (
            close属性：表示循环以什么符号结束  代替了手写 )
        -->
        <!-- 对于传递过来的参数，如果是放在sql中的则必须使用转义 ${}或#{}，但如果是放在mybatis的标签中的 直接用即可不需要加！-->
        <foreach collection="eids" item="eid" separator="," close="" open="">
            #{eid} <!-- 或者'${eid}'-->
        </foreach>
        )
    </delete>










    <!--
     * 通过数组实现批量 删除
    int deleteMoreByArray(Integer[] eids);
    -->
    <delete id="deleteMoreByArray">
        <!-- 目标delete  from t_emp where eid in (1,2,3,4) 所以foreach必须放在小括号(中-->
        delete  from t_emp where eid
        <foreach collection="eids" separator="or eid=" open="=" close=";" item="eid">
            #{eid}
        </foreach>

    </delete>



















    <!--
     * 通过List集合实现批量 添加
    int insertMoreByList(@Param("employees") List<Employee> employees);
    -->
    <insert id="insertMoreByList">
        insert into t_emp values
        <foreach collection="employees" item="employee" separator=",">
            (null ,#{employee.empName},#{employee.age},#{employee.sex},#{employee.email},null)
        </foreach>
    </insert>

</mapper>